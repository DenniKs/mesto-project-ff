{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["// Функция для отображения модального окна\r\nexport function showPopup(popupElement) {\r\n    popupElement.classList.add('popup_is-opened'); // делаем окно видимым\r\n    document.addEventListener('keydown', handleEscapeClose); // слушаем Escape\r\n}\r\n\r\n// Функция для скрытия модального окна\r\nexport function hidePopup(popupElement) {\r\n    popupElement.classList.remove('popup_is-opened'); // убираем класс видимости\r\n    document.removeEventListener('keydown', handleEscapeClose); // удаляем слушатель\r\n}\r\n\r\n// Функция закрытия по клику на фон\r\nexport function overlayClickHandler(event) {\r\n    const openedPopup = document.querySelector('.popup_is-opened');\r\n    if (event.target === openedPopup) {\r\n        hidePopup(openedPopup);\r\n    }\r\n}\r\n\r\n// Функция закрытия по клавише Escape\r\nexport function handleEscapeClose(event) {\r\n    if (event.key === 'Escape') {\r\n        const openedPopup = document.querySelector('.popup_is-opened');\r\n        if (openedPopup) {\r\n            hidePopup(openedPopup);\r\n        }\r\n    }\r\n}\r\n","import { showPopup } from './modal';\r\n\r\n/**\r\n * Проверяет, содержит ли элемент указанный CSS-класс.\r\n *\r\n * @param {Element} element - DOM-элемент, у которого проверяется наличие класса.\r\n * @param {string} className - Имя класса, которое нужно проверить.\r\n * @returns {boolean} - true, если элемент содержит класс, иначе false.\r\n */\r\nfunction hasClass(element, className) {\r\n    return element.classList.contains(className);\r\n}\r\n\r\n/**\r\n * Создаёт DOM-элемент карточки на основе переданных данных.\r\n *\r\n * @param {Object} data - Данные карточки: имя, ссылка, лайки, владелец.\r\n * @param {Function} onDelete - Функция для удаления карточки с сервера.\r\n * @param {Function} onLikeToggle - Функция для добавления/удаления лайка.\r\n * @param {string} userId - ID текущего пользователя.\r\n * @param {Function} onImageClick - Функция открытия попапа с изображением.\r\n * @returns {HTMLElement} - Созданный элемент карточки.\r\n */\r\nexport function createCard(data, onDelete, onLikeToggle, userId, onImageClick) {\r\n    // Получаем шаблон карточки и клонируем его содержимое\r\n    const template = document.querySelector('#card-template').content;\r\n    const cardNode = template.querySelector('.card').cloneNode(true);\r\n\r\n    // Находим нужные элементы внутри карточки\r\n    const btnLike = cardNode.querySelector('.card__like-button');\r\n    const imgElement = cardNode.querySelector('.card__image');\r\n    const likeCount = cardNode.querySelector('.card__count');\r\n    const titleElement = cardNode.querySelector('.card__title');\r\n    const btnDelete = cardNode.querySelector('.card__delete-button');\r\n    const popupTrash = cardNode.querySelector('.popup_type_trash');\r\n    const confirmDelete = cardNode.querySelector('.popup__button');\r\n\r\n    // Устанавливаем данные карточки\r\n    titleElement.textContent = data.name;\r\n    likeCount.textContent = data.likes?.length ?? 0;\r\n\r\n    // Отмечаем лайк, если текущий пользователь уже лайкал карточку\r\n    const liked = data.likes.some(likeObj => likeObj._id === userId);\r\n    if (liked) {\r\n        btnLike.classList.add('card__like-button_is-active');\r\n    }\r\n\r\n    // Обработчик клика по кнопке лайка\r\n    btnLike.addEventListener('click', () => {\r\n        const alreadyLiked = hasClass(btnLike, 'card__like-button_is-active');\r\n\r\n        // Отправляем запрос на сервер для установки/снятия лайка\r\n        onLikeToggle(data._id, alreadyLiked)\r\n            .then((updated) => {\r\n                btnLike.classList.toggle('card__like-button_is-active'); // переключаем состояние кнопки\r\n                likeCount.textContent = updated.likes.length; // обновляем количество лайков\r\n            })\r\n            .catch(err => {\r\n                console.error('Не удалось обновить лайк:', err);\r\n            });\r\n    });\r\n\r\n    // Проверяем, является ли пользователь владельцем карточки\r\n    const isOwner = data.owner._id === userId;\r\n    if (!isOwner) {\r\n        // Если не владелец — удаляем кнопку удаления\r\n        btnDelete.remove();\r\n    } else {\r\n        // Если владелец — добавляем обработчики удаления карточки\r\n        btnDelete.addEventListener('click', () => {\r\n            showPopup(popupTrash); // открываем попап подтверждения\r\n        });\r\n\r\n        confirmDelete.addEventListener('click', () => {\r\n            onDelete(data._id)\r\n                .then(() => {\r\n                    cardNode.remove(); // удаляем карточку из DOM\r\n                })\r\n                .catch(err => {\r\n                    console.error('Ошибка при удалении:', err);\r\n                });\r\n        });\r\n    }\r\n\r\n    // Устанавливаем изображение и его описание\r\n    imgElement.src = data.link;\r\n    imgElement.alt = data.name;\r\n\r\n    // Открытие изображения в попапе при клике\r\n    imgElement.addEventListener('click', () => {\r\n        onImageClick(data.link, data.name);\r\n    });\r\n\r\n    // Возвращаем готовый DOM-элемент карточки\r\n    return cardNode;\r\n}\r\n","// Проверка валидности одного поля формы\r\nexport const validateInput = (form, input, config) => {\r\n    if (input.validity.patternMismatch) {\r\n        input.setCustomValidity(input.dataset.errorMessage || '');\r\n    } else {\r\n        input.setCustomValidity('');\r\n    }\r\n\r\n    if (!input.validity.valid) {\r\n        displayError(form, input, input.validationMessage, config);\r\n    } else {\r\n        removeError(form, input, config);\r\n    }\r\n};\r\n\r\n// Показывает сообщение об ошибке\r\nexport const displayError = (form, input, message, config) => {\r\n    const errorText = form.querySelector(`.${input.id}-error`);\r\n    input.classList.add(config.errorClass);\r\n    errorText.textContent = message;\r\n    errorText.classList.add(config.inputErrorClass);\r\n};\r\n\r\n// Убирает сообщение об ошибке\r\nexport const removeError = (form, input, config) => {\r\n    const errorText = form.querySelector(`.${input.id}-error`);\r\n    input.classList.remove(config.errorClass);\r\n    errorText.textContent = '';\r\n    errorText.classList.remove(config.inputErrorClass);\r\n};\r\n\r\n// Отключает кнопку отправки\r\nconst blockSubmitButton = (button, config) => {\r\n    button.disabled = true;\r\n    button.classList.add(config.inactiveButtonClass);\r\n};\r\n\r\n// Включает кнопку отправки\r\nconst unblockSubmitButton = (button, config) => {\r\n    button.disabled = false;\r\n    button.classList.remove(config.inactiveButtonClass);\r\n};\r\n\r\n// Проверяет наличие невалидных полей\r\nexport const containsInvalidInput = (inputs) => {\r\n    return inputs.some(input => !input.validity.valid);\r\n};\r\n\r\n// Обновляет состояние кнопки отправки\r\nexport const updateSubmitState = (inputs, button, config) => {\r\n    if (containsInvalidInput(inputs)) {\r\n        blockSubmitButton(button, config);\r\n    } else {\r\n        unblockSubmitButton(button, config);\r\n    }\r\n};\r\n\r\n// Назначает обработчики события ввода\r\nexport const applyValidationListeners = (form, config) => {\r\n    const inputs = Array.from(form.querySelectorAll(config.inputSelector));\r\n    const submitBtn = form.querySelector(config.submitButtonSelector);\r\n\r\n    updateSubmitState(inputs, submitBtn, config);\r\n\r\n    inputs.forEach(input => {\r\n        input.addEventListener('input', () => {\r\n            validateInput(form, input, config);\r\n            updateSubmitState(inputs, submitBtn, config);\r\n        });\r\n    });\r\n};\r\n\r\n// Запускает валидацию для всех форм на странице\r\nexport const initFormValidation = (config) => {\r\n    const forms = Array.from(document.querySelectorAll(config.formSelector));\r\n    forms.forEach(form => applyValidationListeners(form, config));\r\n};\r\n\r\n// Сброс валидации при открытии формы\r\nexport const resetValidationState = (form, config) => {\r\n    const inputs = Array.from(form.querySelectorAll(config.inputSelector));\r\n    const submitBtn = form.querySelector(config.submitButtonSelector);\r\n\r\n    inputs.forEach(input => removeError(form, input, config));\r\n    blockSubmitButton(submitBtn, config);\r\n};\r\n","// Настройки для работы с API\r\nconst API_SETTINGS = {\r\n    URL: 'https://nomoreparties.co/v1/wff-cohort-39',\r\n    HEADERS: {\r\n        Authorization: '2b16940d-340a-4cb4-8e7c-62e0c2612983',\r\n        'Content-Type': 'application/json'\r\n    }\r\n};\r\n\r\n// Универсальная обработка ответа сервера\r\nconst processResponse = (res) => {\r\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Проверка: является ли URL допустимой ссылкой на изображение\r\nexport const validateImageURL = (input) => {\r\n    return fetch(input.value, { method: 'HEAD' })\r\n        .then((res) => {\r\n            if (!res.ok) {\r\n                console.warn('Сервер вернул ошибку');\r\n                return;\r\n            }\r\n            const type = res.headers.get('Content-Type') || '';\r\n            if (!type.startsWith('image/')) {\r\n                console.warn('Недопустимый формат: не изображение');\r\n            }\r\n        });\r\n};\r\n\r\n// Обновление аватара\r\nexport const changeAvatar = (avatarInput) => {\r\n    return fetch(`${API_SETTINGS.URL}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: API_SETTINGS.HEADERS,\r\n        body: JSON.stringify({ avatar: avatarInput.value })\r\n    }).then(processResponse);\r\n};\r\n\r\n// Обновление профиля пользователя\r\nexport const editProfile = (username, userInfo) => {\r\n    return fetch(`${API_SETTINGS.URL}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: API_SETTINGS.HEADERS,\r\n        body: JSON.stringify({ name: username, about: userInfo })\r\n    }).then(processResponse);\r\n};\r\n\r\n// Создание новой карточки\r\nexport const addCard = (title, imageUrl) => {\r\n    return fetch(`${API_SETTINGS.URL}/cards`, {\r\n        method: 'POST',\r\n        headers: API_SETTINGS.HEADERS,\r\n        body: JSON.stringify({ name: title, link: imageUrl })\r\n    }).then(processResponse);\r\n};\r\n\r\n// Получение информации о текущем пользователе\r\nexport const fetchUserProfile = () => {\r\n    return fetch(`${API_SETTINGS.URL}/users/me`, {\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n\r\n// Загрузка стартовых карточек\r\nexport const fetchInitialCards = () => {\r\n    return fetch(`${API_SETTINGS.URL}/cards`, {\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n\r\n// Удаление карточки по ID\r\nexport const removeCard = (id) => {\r\n    return fetch(`${API_SETTINGS.URL}/cards/${id}`, {\r\n        method: 'DELETE',\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n\r\n// Управление лайком (добавить/удалить)\r\nexport const toggleLike = (cardId, isLiked) => {\r\n    const method = isLiked ? 'DELETE' : 'PUT';\r\n    return fetch(`${API_SETTINGS.URL}/cards/likes/${cardId}`, {\r\n        method,\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n","import '../pages/index.css';\nimport { createCard } from './card.js';\nimport { showPopup, hidePopup, overlayClickHandler } from './modal.js';\nimport { initFormValidation, resetValidationState } from './validation.js';\nimport {\n    validateImageURL,\n    changeAvatar,\n    editProfile,\n    addCard,\n    fetchUserProfile,\n    fetchInitialCards,\n    removeCard,\n    toggleLike\n} from './api.js';\n\n// DOM-элементы\nconst btnEdit = document.querySelector('.profile__edit-button');\nconst btnAdd = document.querySelector('.profile__add-button');\nconst popupEditProfile = document.querySelector('.popup_type_edit');\nconst popupAddCard = document.querySelector('.popup_type_new-card');\nconst popupEditAvatar = document.querySelector('.popup_type_new_avatar');\nconst avatarElement = document.querySelector('.profile__image');\n\nconst inputName = document.querySelector('.popup__input_type_name');\nconst inputDesc = document.querySelector('.popup__input_type_description');\nconst displayName = document.querySelector('.profile__title');\nconst displayDesc = document.querySelector('.profile__description');\nconst formProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\nconst formCard = document.querySelector('.popup__form[name=\"new-place\"]');\nconst formAvatar = document.querySelector('.popup__form[name=\"new-avatar\"]');\nconst inputAvatar = document.querySelector('.popup__input_type_avatar');\n\nconst popupImage = document.querySelector('.popup_type_image');\nconst popupImg = document.querySelector('.popup__image');\nconst popupCaption = document.querySelector('.popup__caption');\n\nconst cardList = document.querySelector('.places__list');\n\nconst validationSettings = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n};\n\n// Открытие попапов\nbtnEdit.addEventListener('click', () => {\n    resetValidationState(formProfile, validationSettings);\n    inputName.value = displayName.textContent;\n    inputDesc.value = displayDesc.textContent;\n    showPopup(popupEditProfile);\n});\n\nbtnAdd.addEventListener('click', () => {\n    resetValidationState(formCard, validationSettings);\n    showPopup(popupAddCard);\n});\n\navatarElement.addEventListener('click', () => {\n    resetValidationState(formAvatar, validationSettings);\n    showPopup(popupEditAvatar);\n});\n\n// Закрытие по кнопке\ndocument.addEventListener('click', (e) => {\n    if (e.target.classList.contains('popup__close')) {\n        hidePopup(e.target.closest('.popup'));\n    }\n});\n\n// Открытие полноэкранного изображения\nfunction previewImage(link, title) {\n    popupImg.src = link;\n    popupImg.alt = title;\n    popupCaption.textContent = title;\n    showPopup(popupImage);\n}\n\ndocument.addEventListener('click', overlayClickHandler);\ninitFormValidation(validationSettings);\n\n// Отправка формы смены аватара\nformAvatar.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const btn = formAvatar.querySelector('.popup__button');\n    btn.textContent = 'Сохранение...';\n    btn.disabled = true;\n\n    validateImageURL(inputAvatar)\n        .catch(err => console.error('Ошибка валидации аватара:', err));\n\n    changeAvatar(inputAvatar)\n        .then(data => {\n            avatarElement.style.backgroundImage = `url(${data.avatar})`;\n        })\n        .finally(() => {\n            btn.textContent = 'Сохранить';\n            btn.disabled = false;\n            hidePopup(popupEditAvatar);\n        })\n        .catch(err => console.error('Ошибка обновления аватара:', err));\n});\n\n// Отправка формы профиля\nformProfile.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const btn = formProfile.querySelector('.popup__button');\n    btn.textContent = 'Сохранение...';\n    btn.disabled = true;\n\n    displayName.textContent = inputName.value;\n    displayDesc.textContent = inputDesc.value;\n\n    editProfile(inputName.value, inputDesc.value)\n        .then(data => {\n            displayName.textContent = data.name;\n            displayDesc.textContent = data.about;\n        })\n        .finally(() => {\n            btn.textContent = 'Сохранить';\n            btn.disabled = false;\n            hidePopup(popupEditProfile);\n        })\n        .catch(err => console.error('Ошибка обновления профиля:', err));\n});\n\n// Отправка формы карточки\nformCard.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const btn = formCard.querySelector('.popup__button');\n    const name = formCard.querySelector('.popup__input_type_card-name').value;\n    const link = formCard.querySelector('.popup__input_type_url').value;\n\n    btn.textContent = 'Сохранение...';\n    btn.disabled = true;\n\n    addCard(name, link)\n        .then(card => {\n            const cardEl = createCard(card, removeCard, toggleLike, card.owner._id, previewImage);\n            cardList.prepend(cardEl);\n        })\n        .finally(() => {\n            btn.textContent = 'Сохранить';\n            btn.disabled = false;\n            formCard.reset();\n            hidePopup(popupAddCard);\n        })\n        .catch(err => console.error('Ошибка добавления карточки:', err));\n});\n\n// Загрузка начальных данных\nPromise.all([fetchUserProfile(), fetchInitialCards()])\n    .then(([user, cards]) => {\n        avatarElement.style.backgroundImage = `url(${user.avatar})`;\n        displayName.textContent = user.name;\n        displayDesc.textContent = user.about;\n        const currentUserId = user._id;\n\n        cards.forEach(card => {\n            const item = createCard(card, removeCard, toggleLike, currentUserId, previewImage);\n            cardList.append(item);\n        });\n    })\n    .catch(err => console.error('Ошибка загрузки данных:', err));\n"],"names":["showPopup","popupElement","classList","add","document","addEventListener","handleEscapeClose","hidePopup","remove","removeEventListener","event","key","openedPopup","querySelector","createCard","data","onDelete","onLikeToggle","userId","onImageClick","_data$likes$length","_data$likes","cardNode","content","cloneNode","btnLike","imgElement","likeCount","titleElement","btnDelete","popupTrash","confirmDelete","textContent","name","likes","length","some","likeObj","_id","alreadyLiked","contains","then","updated","toggle","catch","err","console","error","owner","src","link","alt","removeError","form","input","config","errorText","concat","id","errorClass","inputErrorClass","blockSubmitButton","button","disabled","inactiveButtonClass","updateSubmitState","inputs","validity","valid","containsInvalidInput","unblockSubmitButton","resetValidationState","Array","from","querySelectorAll","inputSelector","submitBtn","submitButtonSelector","forEach","API_SETTINGS","URL","HEADERS","Authorization","processResponse","res","ok","json","Promise","reject","status","removeCard","fetch","method","headers","toggleLike","cardId","isLiked","btnEdit","btnAdd","popupEditProfile","popupAddCard","popupEditAvatar","avatarElement","inputName","inputDesc","displayName","displayDesc","formProfile","formCard","formAvatar","inputAvatar","popupImage","popupImg","popupCaption","cardList","validationSettings","formSelector","previewImage","title","value","e","target","closest","patternMismatch","setCustomValidity","dataset","errorMessage","message","displayError","validationMessage","validateInput","applyValidationListeners","preventDefault","avatarInput","btn","get","startsWith","warn","body","JSON","stringify","avatar","style","backgroundImage","finally","username","userInfo","about","imageUrl","card","cardEl","prepend","reset","all","_ref","_ref2","user","cards","currentUserId","item","append"],"sourceRoot":""}