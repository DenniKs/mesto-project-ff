{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["/**\r\n * Проверяет, содержит ли элемент указанный CSS-класс.\r\n *\r\n * @param {Element} element - DOM-элемент, у которого проверяется наличие класса.\r\n * @param {string} className - Имя класса, которое нужно проверить.\r\n * @returns {boolean} - true, если элемент содержит класс, иначе false.\r\n */\r\nconst hasClass = (element, className) => {\r\n    return element.classList.contains(className);\r\n};\r\n\r\n/**\r\n * Создаёт DOM-элемент карточки на основе переданных данных.\r\n *\r\n * @param {Object} data - Данные карточки: имя, ссылка, лайки, владелец.\r\n * @param {Function} onDeleteClick - Обработчик клика по корзинке удаления (cardId, cardElement)\r\n * @param {Function} onLikeToggle - Функция для добавления/удаления лайка.\r\n * @param {string} userId - ID текущего пользователя.\r\n * @param {Function} onImageClick - Функция открытия попапа с изображением.\r\n * @returns {HTMLElement} - Созданный элемент карточки.\r\n */\r\nexport const createCard = (data, onDeleteClick, onLikeToggle, userId, onImageClick) => {\r\n    // Получаем шаблон карточки и клонируем его содержимое\r\n    const template = document.querySelector('#card-template').content;\r\n    const cardNode = template.querySelector('.card').cloneNode(true);\r\n\r\n    // Находим нужные элементы внутри карточки\r\n    const btnLike = cardNode.querySelector('.card__like-button');\r\n    const imgElement = cardNode.querySelector('.card__image');\r\n    const likeCount = cardNode.querySelector('.card__count');\r\n    const titleElement = cardNode.querySelector('.card__title');\r\n    const btnDelete = cardNode.querySelector('.card__delete-button');\r\n\r\n    // Устанавливаем данные карточки\r\n    titleElement.textContent = data.name;\r\n    likeCount.textContent = data.likes?.length ?? 0;\r\n\r\n    // Отмечаем лайк, если текущий пользователь уже лайкал карточку\r\n    const liked = data.likes.some(likeObj => likeObj._id === userId);\r\n    if (liked) {\r\n        btnLike.classList.add('card__like-button_is-active');\r\n    }\r\n\r\n    // Обработчик клика по кнопке лайка\r\n    btnLike.addEventListener('click', () => {\r\n        const alreadyLiked = hasClass(btnLike, 'card__like-button_is-active');\r\n\r\n        // Отправляем запрос на сервер для установки/снятия лайка\r\n        onLikeToggle(data._id, alreadyLiked)\r\n            .then((updated) => {\r\n                btnLike.classList.toggle('card__like-button_is-active'); // переключаем состояние кнопки\r\n                likeCount.textContent = updated.likes.length; // обновляем количество лайков\r\n            })\r\n            .catch(err => {\r\n                console.error('Не удалось обновить лайк:', err);\r\n            });\r\n    });\r\n\r\n    // Проверяем, является ли пользователь владельцем карточки\r\n    const isOwner = data.owner._id === userId;\r\n    if (!isOwner) {\r\n        // Если не владелец — удаляем кнопку удаления\r\n        btnDelete.remove();\r\n    } else {\r\n        // Если владелец — добавляем обработчики удаления карточки\r\n        btnDelete.addEventListener('click', () => {\r\n            onDeleteClick(data._id, cardNode);\r\n        });\r\n    }\r\n\r\n    // Устанавливаем изображение и его описание\r\n    imgElement.src = data.link;\r\n    imgElement.alt = data.name;\r\n\r\n    // Открытие изображения в попапе при клике\r\n    imgElement.addEventListener('click', () => {\r\n        onImageClick(data.link, data.name);\r\n    });\r\n\r\n    // Возвращаем готовый DOM-элемент карточки\r\n    return cardNode;\r\n};\r\n","// Функция для отображения модального окна\r\nexport const showPopup = (popupElement) => {\r\n    popupElement.classList.add('popup_is-opened'); // делаем окно видимым\r\n    document.addEventListener('keydown', handleEscapeClose); // слушаем Escape\r\n};\r\n\r\n// Функция для скрытия модального окна\r\nexport const hidePopup = (popupElement) => {\r\n    popupElement.classList.remove('popup_is-opened'); // убираем класс видимости\r\n    document.removeEventListener('keydown', handleEscapeClose); // удаляем слушатель\r\n};\r\n\r\n// Функция закрытия по клику на фон\r\nexport const overlayClickHandler = (event) => {\r\n    const openedPopup = document.querySelector('.popup_is-opened');\r\n    if (event.target === openedPopup) {\r\n        hidePopup(openedPopup);\r\n    }\r\n};\r\n\r\n// Функция закрытия по клавише Escape\r\nexport const handleEscapeClose = (event) => {\r\n    if (event.key === 'Escape') {\r\n        const openedPopup = document.querySelector('.popup_is-opened');\r\n        if (openedPopup) {\r\n            hidePopup(openedPopup);\r\n        }\r\n    }\r\n};\r\n","// Проверка валидности одного поля формы\r\nexport const validateInput = (form, input, config) => {\r\n    if (input.validity.patternMismatch) {\r\n        input.setCustomValidity(input.dataset.errorMessage || '');\r\n    } else {\r\n        input.setCustomValidity('');\r\n    }\r\n\r\n    if (!input.validity.valid) {\r\n        displayError(form, input, input.validationMessage, config);\r\n    } else {\r\n        removeError(form, input, config);\r\n    }\r\n};\r\n\r\n// Показывает сообщение об ошибке\r\nexport const displayError = (form, input, message, config) => {\r\n    const errorText = form.querySelector(`.${input.id}-error`);\r\n    input.classList.add(config.errorClass);\r\n    errorText.textContent = message;\r\n    errorText.classList.add(config.inputErrorClass);\r\n};\r\n\r\n// Убирает сообщение об ошибке\r\nexport const removeError = (form, input, config) => {\r\n    const errorText = form.querySelector(`.${input.id}-error`);\r\n    input.classList.remove(config.errorClass);\r\n    errorText.textContent = '';\r\n    errorText.classList.remove(config.inputErrorClass);\r\n};\r\n\r\n// Отключает кнопку отправки\r\nconst blockSubmitButton = (button, config) => {\r\n    button.disabled = true;\r\n    button.classList.add(config.inactiveButtonClass);\r\n};\r\n\r\n// Включает кнопку отправки\r\nconst unblockSubmitButton = (button, config) => {\r\n    button.disabled = false;\r\n    button.classList.remove(config.inactiveButtonClass);\r\n};\r\n\r\n// Проверяет наличие невалидных полей\r\nexport const containsInvalidInput = (inputs) => {\r\n    return inputs.some(input => !input.validity.valid);\r\n};\r\n\r\n// Обновляет состояние кнопки отправки\r\nexport const updateSubmitState = (inputs, button, config) => {\r\n    if (containsInvalidInput(inputs)) {\r\n        blockSubmitButton(button, config);\r\n    } else {\r\n        unblockSubmitButton(button, config);\r\n    }\r\n};\r\n\r\n// Назначает обработчики события ввода\r\nexport const applyValidationListeners = (form, config) => {\r\n    const inputs = Array.from(form.querySelectorAll(config.inputSelector));\r\n    const submitBtn = form.querySelector(config.submitButtonSelector);\r\n\r\n    updateSubmitState(inputs, submitBtn, config);\r\n\r\n    inputs.forEach(input => {\r\n        input.addEventListener('input', () => {\r\n            validateInput(form, input, config);\r\n            updateSubmitState(inputs, submitBtn, config);\r\n        });\r\n    });\r\n};\r\n\r\n// Запускает валидацию для всех форм на странице\r\nexport const initFormValidation = (config) => {\r\n    const forms = Array.from(document.querySelectorAll(config.formSelector));\r\n    forms.forEach(form => applyValidationListeners(form, config));\r\n};\r\n\r\n// Сброс валидации при открытии формы\r\nexport const resetValidationState = (form, config) => {\r\n    const inputs = Array.from(form.querySelectorAll(config.inputSelector));\r\n    const submitBtn = form.querySelector(config.submitButtonSelector);\r\n\r\n    inputs.forEach(input => removeError(form, input, config));\r\n    blockSubmitButton(submitBtn, config);\r\n};\r\n","// Настройки для работы с API\r\nconst API_SETTINGS = {\r\n    URL: 'https://nomoreparties.co/v1/wff-cohort-39',\r\n    HEADERS: {\r\n        Authorization: '2b16940d-340a-4cb4-8e7c-62e0c2612983',\r\n        'Content-Type': 'application/json'\r\n    }\r\n};\r\n\r\n// Универсальная обработка ответа сервера\r\nconst processResponse = (res) => {\r\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Проверка: является ли URL допустимой ссылкой на изображение\r\nexport const validateImageURL = (input) => {\r\n    return fetch(input.value, { method: 'HEAD' })\r\n        .then((res) => {\r\n            if (!res.ok) {\r\n                console.warn('Сервер вернул ошибку');\r\n                return;\r\n            }\r\n            const type = res.headers.get('Content-Type') || '';\r\n            if (!type.startsWith('image/')) {\r\n                console.warn('Недопустимый формат: не изображение');\r\n            }\r\n        });\r\n};\r\n\r\n// Обновление аватара\r\nexport const changeAvatar = (avatarInput) => {\r\n    return fetch(`${API_SETTINGS.URL}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: API_SETTINGS.HEADERS,\r\n        body: JSON.stringify({ avatar: avatarInput.value })\r\n    }).then(processResponse);\r\n};\r\n\r\n// Обновление профиля пользователя\r\nexport const editProfile = (username, userInfo) => {\r\n    return fetch(`${API_SETTINGS.URL}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: API_SETTINGS.HEADERS,\r\n        body: JSON.stringify({ name: username, about: userInfo })\r\n    }).then(processResponse);\r\n};\r\n\r\n// Создание новой карточки\r\nexport const addCard = (title, imageUrl) => {\r\n    return fetch(`${API_SETTINGS.URL}/cards`, {\r\n        method: 'POST',\r\n        headers: API_SETTINGS.HEADERS,\r\n        body: JSON.stringify({ name: title, link: imageUrl })\r\n    }).then(processResponse);\r\n};\r\n\r\n// Получение информации о текущем пользователе\r\nexport const fetchUserProfile = () => {\r\n    return fetch(`${API_SETTINGS.URL}/users/me`, {\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n\r\n// Загрузка стартовых карточек\r\nexport const fetchInitialCards = () => {\r\n    return fetch(`${API_SETTINGS.URL}/cards`, {\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n\r\n// Удаление карточки по ID\r\nexport const removeCard = (id) => {\r\n    return fetch(`${API_SETTINGS.URL}/cards/${id}`, {\r\n        method: 'DELETE',\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n\r\n// Управление лайком (добавить/удалить)\r\nexport const toggleLike = (cardId, isLiked) => {\r\n    const method = isLiked ? 'DELETE' : 'PUT';\r\n    return fetch(`${API_SETTINGS.URL}/cards/likes/${cardId}`, {\r\n        method,\r\n        headers: { Authorization: API_SETTINGS.HEADERS.Authorization }\r\n    }).then(processResponse);\r\n};\r\n","import '../pages/index.css';\nimport { createCard } from './card.js';\nimport { showPopup, hidePopup, overlayClickHandler } from './modal.js';\nimport { initFormValidation, resetValidationState } from './validation.js';\nimport {\n    validateImageURL,\n    changeAvatar,\n    editProfile,\n    addCard,\n    fetchUserProfile,\n    fetchInitialCards,\n    removeCard,\n    toggleLike\n} from './api.js';\n\n// DOM-элементы\nconst btnEdit = document.querySelector('.profile__edit-button');\nconst btnAdd = document.querySelector('.profile__add-button');\nconst popupEditProfile = document.querySelector('.popup_type_edit');\nconst popupAddCard = document.querySelector('.popup_type_new-card');\nconst popupEditAvatar = document.querySelector('.popup_type_new_avatar');\nconst avatarElement = document.querySelector('.profile__image');\n\nconst inputName = document.querySelector('.popup__input_type_name');\nconst inputDesc = document.querySelector('.popup__input_type_description');\nconst displayName = document.querySelector('.profile__title');\nconst displayDesc = document.querySelector('.profile__description');\nconst formProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\nconst formCard = document.querySelector('.popup__form[name=\"new-place\"]');\nconst formAvatar = document.querySelector('.popup__form[name=\"new-avatar\"]');\nconst inputAvatar = document.querySelector('.popup__input_type_avatar');\n\nconst popupImage = document.querySelector('.popup_type_image');\nconst popupImg = document.querySelector('.popup__image');\nconst popupCaption = document.querySelector('.popup__caption');\n\nconst cardList = document.querySelector('.places__list');\n\nconst validationSettings = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n};\n\n// Утилита для управления состоянием загрузки кнопки\nconst setButtonLoadingState = (button, isLoading, defaultText = 'Сохранить', loadingText = 'Сохранение...') => {\n    if (isLoading) {\n        button.textContent = loadingText;\n        button.disabled = true;\n    } else {\n        button.textContent = defaultText;\n        button.disabled = false;\n    }\n};\n\n// Обработчик клика по корзинке удаления\nexport const handleDeleteClick = (cardId, cardElement) => {\n    // Открываем попап подтверждения удаления\n    // cardId - идентификатор карточки, cardElement - DOM-элемент карточки\n    const popupTrash = document.querySelector('.popup_type_trash');\n    if (!popupTrash) return;\n\n    // Открываем попап с помощью функции showPopup\n    showPopup(popupTrash);\n\n    // Находим кнопку подтверждения\n    const confirmBtn = popupTrash.querySelector('.popup__button');\n    // Снимаем предыдущие обработчики (если есть)\n    const newConfirmBtn = confirmBtn.cloneNode(true);\n    confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);\n\n    // Находим и обновляем кнопку-крестик\n    const closeBtn = popupTrash.querySelector('.popup__close');\n    if (closeBtn) {\n        const newCloseBtn = closeBtn.cloneNode(true);\n        closeBtn.parentNode.replaceChild(newCloseBtn, closeBtn);\n        newCloseBtn.addEventListener('click', () => {\n            hidePopup(popupTrash);\n            popupTrash.removeEventListener('mousedown', overlayClickHandler);\n        });\n    }\n\n    popupTrash.addEventListener('mousedown', overlayClickHandler);\n\n    newConfirmBtn.addEventListener('click', () => {\n        removeCard(cardId)\n            .then(() => {\n                cardElement.remove();\n                hidePopup(popupTrash); // Закрываем попап только при успешном удалении\n                popupTrash.removeEventListener('mousedown', overlayClickHandler);\n            })\n            .catch(err => {\n                console.error('Ошибка при удалении:', err);\n            });\n    });\n};\n\n// Открытие попапов\nbtnEdit.addEventListener('click', () => {\n    resetValidationState(formProfile, validationSettings);\n    inputName.value = displayName.textContent;\n    inputDesc.value = displayDesc.textContent;\n    showPopup(popupEditProfile);\n});\n\nbtnAdd.addEventListener('click', () => {\n    formCard.reset(); // Очищаем поля формы\n    resetValidationState(formCard, validationSettings);\n    showPopup(popupAddCard);\n});\n\navatarElement.addEventListener('click', () => {\n    resetValidationState(formAvatar, validationSettings);\n    showPopup(popupEditAvatar);\n});\n\n// Добавляем обработчики закрытия на кнопки и оверлеи каждого попапа\ndocument.querySelectorAll('.popup').forEach(popup => {\n    // Кнопка закрытия\n    const closeBtn = popup.querySelector('.popup__close');\n    if (closeBtn) {\n        closeBtn.addEventListener('click', () => hidePopup(popup));\n    }\n    // Клик по оверлею\n    popup.addEventListener('mousedown', (e) => {\n        if (e.target === popup) {\n            hidePopup(popup);\n        }\n    });\n});\n\n// Открытие полноэкранного изображения\nconst previewImage = (link, title) => {\n    popupImg.src = link;\n    popupImg.alt = title;\n    popupCaption.textContent = title;\n    showPopup(popupImage);\n}\n\ninitFormValidation(validationSettings);\n\n// Отправка формы смены аватара\nformAvatar.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const btn = formAvatar.querySelector('.popup__button');\n    setButtonLoadingState(btn, true);\n\n    validateImageURL(inputAvatar)\n        .then(() => {\n            return changeAvatar(inputAvatar);\n        })\n        .then(data => {\n            avatarElement.style.backgroundImage = `url(${data.avatar})`;\n            hidePopup(popupEditAvatar);\n            formAvatar.reset();\n        })\n        .catch(err => console.error('Ошибка обновления аватара:', err))\n        .finally(() => {\n            setButtonLoadingState(btn, false);\n        });\n});\n\n// Отправка формы профиля\nformProfile.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const btn = formProfile.querySelector('.popup__button');\n    setButtonLoadingState(btn, true);\n\n    editProfile(inputName.value, inputDesc.value)\n        .then(data => {\n            displayName.textContent = data.name;\n            displayDesc.textContent = data.about;\n            hidePopup(popupEditProfile);\n        })\n        .catch(err => console.error('Ошибка обновления профиля:', err))\n        .finally(() => {\n            setButtonLoadingState(btn, false);\n        });\n});\n\n// Отправка формы карточки\nformCard.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const btn = formCard.querySelector('.popup__button');\n    const name = formCard.querySelector('.popup__input_type_card-name').value;\n    const link = formCard.querySelector('.popup__input_type_url').value;\n\n    setButtonLoadingState(btn, true);\n\n    addCard(name, link)\n        .then(card => {\n            const cardEl = createCard(card, handleDeleteClick, toggleLike, card.owner._id, previewImage);\n            cardList.prepend(cardEl);\n            formCard.reset();\n            hidePopup(popupAddCard);\n        })\n        .catch(err => console.error('Ошибка добавления карточки:', err))\n        .finally(() => {\n            setButtonLoadingState(btn, false);\n        });\n});\n\n// Загрузка начальных данных\nPromise.all([fetchUserProfile(), fetchInitialCards()])\n    .then(([user, cards]) => {\n        avatarElement.style.backgroundImage = `url(${user.avatar})`;\n        displayName.textContent = user.name;\n        displayDesc.textContent = user.about;\n        const currentUserId = user._id;\n\n        cards.forEach(card => {\n            const item = createCard(card, handleDeleteClick, toggleLike, currentUserId, previewImage);\n            cardList.append(item);\n        });\n    })\n    .catch(err => console.error('Ошибка загрузки данных:', err));\n"],"names":["createCard","data","onDeleteClick","onLikeToggle","userId","onImageClick","_data$likes$length","_data$likes","cardNode","document","querySelector","content","cloneNode","btnLike","imgElement","likeCount","titleElement","btnDelete","textContent","name","likes","length","some","likeObj","_id","classList","add","addEventListener","alreadyLiked","contains","then","updated","toggle","catch","err","console","error","owner","remove","src","link","alt","showPopup","popupElement","handleEscapeClose","hidePopup","removeEventListener","overlayClickHandler","event","openedPopup","target","key","removeError","form","input","config","errorText","concat","id","errorClass","inputErrorClass","blockSubmitButton","button","disabled","inactiveButtonClass","updateSubmitState","inputs","validity","valid","containsInvalidInput","unblockSubmitButton","resetValidationState","Array","from","querySelectorAll","inputSelector","submitBtn","submitButtonSelector","forEach","API_SETTINGS","URL","HEADERS","Authorization","processResponse","res","ok","json","Promise","reject","status","toggleLike","cardId","isLiked","method","fetch","headers","btnEdit","btnAdd","popupEditProfile","popupAddCard","popupEditAvatar","avatarElement","inputName","inputDesc","displayName","displayDesc","formProfile","formCard","formAvatar","inputAvatar","popupImage","popupImg","popupCaption","cardList","validationSettings","formSelector","setButtonLoadingState","isLoading","defaultText","arguments","undefined","loadingText","handleDeleteClick","cardElement","popupTrash","confirmBtn","newConfirmBtn","parentNode","replaceChild","closeBtn","newCloseBtn","value","reset","popup","e","previewImage","title","patternMismatch","setCustomValidity","dataset","errorMessage","message","displayError","validationMessage","validateInput","applyValidationListeners","preventDefault","btn","get","startsWith","warn","avatarInput","body","JSON","stringify","avatar","style","backgroundImage","finally","username","userInfo","about","imageUrl","card","cardEl","prepend","all","_ref","_ref2","user","cards","currentUserId","item","append"],"sourceRoot":""}