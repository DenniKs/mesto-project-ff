{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["// Открывает модальное окно\r\nexport function openModal(currentModal) {\r\n    currentModal.classList.add('popup_is-opened'); // добавляет класс, делающий модалку видимой\r\n    document.addEventListener('keydown', closeModalEscape); // добавляет слушатель для закрытия по клавише Escape\r\n};\r\n\r\n// Закрывает модальное окно\r\nexport function closeModal(currentModal) {\r\n    currentModal.classList.remove('popup_is-opened'); // удаляет класс, скрывающий модалку\r\n    document.removeEventListener('keydown', closeModalEscape); // удаляет обработчик клавиши Escape\r\n};\r\n\r\n// Закрывает модальное окно по клику на оверлей (область вне содержимого модалки)\r\nexport function closeModalOverlay(evt) {\r\n    const currentModal = document.querySelector('.popup_is-opened'); // находим текущее открытое модальное окно\r\n    if (evt.target === currentModal) { // если клик был именно по оверлею (а не по внутреннему контенту)\r\n        closeModal(currentModal); // закрываем модалку\r\n    }\r\n};\r\n\r\n// Закрывает модальное окно при нажатии клавиши Escape\r\nexport function closeModalEscape(evt) {\r\n    if (evt.key === 'Escape') { // проверка на нажатие клавиши Escape\r\n        const currentModal = document.querySelector('.popup_is-opened'); // находим текущее открытое модальное окно\r\n        if (currentModal) {\r\n            closeModal(currentModal); // закрываем его\r\n        }\r\n    }\r\n};\r\n","import { openModal } from \"./modal\";\r\n\r\n/**\r\n * Создаёт DOM-элемент карточки на основе переданных данных.\r\n * \r\n * @param {Object} cardData - Данные карточки (название, ссылка, лайки, владелец и т.д.)\r\n * @param {Function} handleDeleteCard - Функция для удаления карточки с сервера\r\n * @param {Function} handleLikeToggle - Функция для добавления/удаления лайка\r\n * @param {string} currentUserId - ID текущего пользователя\r\n * @param {Function} openImagePopup - Функция для открытия попапа с изображением\r\n * @returns {HTMLElement} - DOM-элемент карточки\r\n */\r\nexport function createCard(cardData, handleDeleteCard, handleLikeToggle, currentUserId, openImagePopup) {\r\n    // Получаем шаблон карточки из DOM и клонируем его содержимое\r\n    const cardTemplate = document.querySelector('#card-template').content;\r\n    const cardElement = cardTemplate.querySelector('.card').cloneNode(true);\r\n\r\n    // Получаем элементы внутри карточки\r\n    const likeButton = cardElement.querySelector('.card__like-button');\r\n    const cardImage = cardElement.querySelector('.card__image');\r\n    const likeCounter = cardElement.querySelector('.card__count');\r\n    const cardTitle = cardElement.querySelector('.card__title');\r\n    const deletePopup = cardElement.querySelector('.popup_type_trash');\r\n    const deleteButton = cardElement.querySelector('.card__delete-button');\r\n    const confirmDeleteButton = cardElement.querySelector('.popup__button');\r\n\r\n    // Устанавливаем текст заголовка и количество лайков\r\n    likeCounter.textContent = cardData.likes ? cardData.likes.length : 0;\r\n    cardTitle.textContent = cardData.name;\r\n\r\n    // Проверяем, лайкнул ли пользователь эту карточку\r\n    const isLikedByUser = cardData.likes.some(like => like._id === currentUserId);\r\n    if (isLikedByUser) {\r\n        likeButton.classList.add('card__like-button_is-active');\r\n    }\r\n\r\n    // Обработчик клика по кнопке лайка\r\n    likeButton.addEventListener('click', () => {\r\n        const hasUserLiked = likeButton.classList.contains('card__like-button_is-active');\r\n\r\n        // Вызываем функцию для добавления/удаления лайка на сервере\r\n        handleLikeToggle(cardData._id, hasUserLiked)\r\n            .then((updatedCard) => {\r\n                // Обновляем состояние кнопки и счётчик лайков\r\n                likeButton.classList.toggle('card__like-button_is-active');\r\n                likeCounter.textContent = updatedCard.likes.length;\r\n            })\r\n            .catch((error) => {\r\n                console.error('Ошибка при установке лайка:', error);\r\n            });\r\n    });\r\n\r\n    // Проверяем, является ли пользователь владельцем карточки\r\n    if (currentUserId !== cardData.owner._id) {\r\n        // Если нет — убираем кнопку удаления\r\n        deleteButton.remove();\r\n    } else {\r\n        // Если да — добавляем обработчики на удаление\r\n        deleteButton.addEventListener('click', () => {\r\n            // Открываем попап подтверждения удаления\r\n            openModal(deletePopup);\r\n        });\r\n\r\n        confirmDeleteButton.addEventListener('click', () => {\r\n            // Удаляем карточку на сервере, затем из DOM\r\n            handleDeleteCard(cardData._id)\r\n                .then(() => {\r\n                    cardElement.remove();\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Ошибка при удалении карточки:', error);\r\n                });\r\n        });\r\n    }\r\n\r\n    // Открытие попапа при клике на изображение\r\n    cardImage.addEventListener('click', () => {\r\n        openImagePopup(cardData.link, cardData.name);\r\n    });\r\n\r\n    // Устанавливаем ссылку и alt для изображения\r\n    cardImage.src = cardData.link;\r\n    cardImage.alt = cardData.name;\r\n\r\n    // Возвращаем готовую карточку\r\n    return cardElement;\r\n}\r\n","// Проверка валидности одного инпута\r\nexport const isValid = (formElement, inputElement, configValidation) => {\r\n    // Установка кастомного сообщения об ошибке при несоответствии шаблону\r\n    if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage); // берем сообщение из data-атрибута\r\n    } else {\r\n        inputElement.setCustomValidity(\"\"); // сброс кастомного сообщения\r\n    }\r\n\r\n    // Отображаем ошибку, если поле невалидно, иначе скрываем\r\n    if (!inputElement.validity.valid) {\r\n        showInputError(formElement, inputElement, inputElement.validationMessage, configValidation);\r\n    } else {\r\n        hideInputError(formElement, inputElement, configValidation);\r\n    }\r\n};\r\n\r\n// Отображает сообщение об ошибке под инпутом\r\nexport const showInputError = (formElement, inputElement, errorMessage, configValidation) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`); // элемент с текстом ошибки\r\n    inputElement.classList.add(configValidation.errorClass); // добавляем класс, стилизующий невалидный инпут\r\n    errorElement.textContent = errorMessage; // вставляем текст ошибки\r\n    errorElement.classList.add(configValidation.inputErrorClass); // отображаем ошибку\r\n};\r\n\r\n// Скрывает сообщение об ошибке\r\nexport const hideInputError = (formElement, inputElement, configValidation) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.remove(configValidation.errorClass); // удаляем класс ошибки с инпута\r\n    errorElement.textContent = ''; // очищаем текст ошибки\r\n    errorElement.classList.remove(configValidation.inputErrorClass); // скрываем элемент ошибки\r\n};\r\n\r\n// Деактивирует кнопку сабмита\r\nconst disableSubmitButton = (button, config) => {\r\n    button.disabled = true; // блокируем кнопку\r\n    button.classList.add(config.inactiveButtonClass); // добавляем класс неактивности\r\n};\r\n\r\n// Активирует кнопку сабмита\r\nconst enableSubmitButton = (button, config) => {\r\n    button.disabled = false;\r\n    button.classList.remove(config.inactiveButtonClass); // убираем класс неактивности\r\n};\r\n\r\n// Проверка, есть ли среди всех инпутов невалидные\r\nexport const hasInvalidInput = (inputList) => {\r\n    return inputList.some((inputElement) => {\r\n        return !inputElement.validity.valid;\r\n    });\r\n};\r\n\r\n// Управление состоянием кнопки отправки формы\r\nexport const toggleButtonState = (inputList, buttonElement, configValidation) => {\r\n    if (hasInvalidInput(inputList)) {\r\n        disableSubmitButton(buttonElement, configValidation); // если есть ошибки — выключаем кнопку\r\n    } else {\r\n        enableSubmitButton(buttonElement, configValidation); // иначе — включаем\r\n    }\r\n};\r\n\r\n// Устанавливает обработчики на поля формы и кнопку\r\nexport const setEventListeners = (formElement, configValidation) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector)); // список инпутов\r\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector); // кнопка отправки\r\n\r\n    toggleButtonState(inputList, buttonElement, configValidation); // начальное состояние кнопки\r\n\r\n    // На каждый инпут — обработчик ввода\r\n    inputList.forEach((inputElement) => {\r\n        inputElement.addEventListener('input', () => {\r\n            isValid(formElement, inputElement, configValidation); // проверка конкретного инпута\r\n            toggleButtonState(inputList, buttonElement, configValidation); // обновление состояния кнопки\r\n        });\r\n    });\r\n};\r\n\r\n// Инициализация валидации для всех форм на странице\r\nexport const enableValidation = (configValidation) => {\r\n    const formList = Array.from(document.querySelectorAll(configValidation.formSelector)); // все формы\r\n    formList.forEach((formElement) => {\r\n        setEventListeners(formElement, configValidation); // подключаем обработчики\r\n    });\r\n};\r\n\r\n// Очищает ошибки и блокирует кнопку при открытии формы\r\nexport function clearValidation(formElement, configValidation) {\r\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector)); // инпуты формы\r\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector); // кнопка отправки\r\n\r\n    // Скрываем все ошибки\r\n    inputList.forEach((inputElement) => {\r\n        hideInputError(formElement, inputElement, configValidation);\r\n    });\r\n\r\n    // Деактивируем кнопку отправки\r\n    disableSubmitButton(buttonElement, configValidation);\r\n};\r\n","// Конфигурация для запросов к серверу API\r\nexport const config = {\r\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-39', // базовый URL API\r\n    headers: {\r\n        authorization: '2b16940d-340a-4cb4-8e7c-62e0c2612983', // токен авторизации\r\n        'Content-Type': 'application/json' // формат отправляемых данных\r\n    }\r\n};\r\n\r\n// Обработчик ответа от сервера\r\nexport const handleResponse = (response) => {\r\n    if (response.ok) {\r\n        // Если ответ успешен — преобразуем его в JSON\r\n        return response.json();\r\n    }\r\n    // Иначе — отклоняем промис с текстом ошибки\r\n    return Promise.reject(`Ошибка: ${response.status}`);\r\n};\r\n\r\n// Проверка доступности и корректности URL изображения\r\nexport const updatePhotoCheck = (url) => {\r\n    return fetch(`${url.value}`, {\r\n        method: 'HEAD', // получаем только заголовки\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                console.log('Произошла ошибка'); // если статус ответа не 2xx\r\n            }\r\n            const contentType = response.headers.get('Content-Type');\r\n            if (!contentType.startsWith('image/')) {\r\n                console.log('URL не является картинкой'); // если тип содержимого не изображение\r\n            }\r\n        })\r\n};\r\n\r\n// Обновление аватара пользователя\r\nexport const updatePhoto = (newAvatarPhoto) => {\r\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n        method: 'PATCH', // метод обновления данных\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            avatar: `${newAvatarPhoto.value}` // передаём новый URL аватара\r\n        })\r\n    })\r\n        .then(handleResponse);\r\n};\r\n\r\n// Обновление информации о пользователе (имя и описание)\r\nexport const updateProfile = (nameData, aboutData,) => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            name: nameData, // новое имя\r\n            about: aboutData, // новое описание\r\n        })\r\n    })\r\n        .then(handleResponse);\r\n};\r\n\r\n// Добавление новой карточки (места)\r\nexport const addCard = (nameCard, linkCard) => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'POST',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            name: nameCard, // название карточки\r\n            link: linkCard, // ссылка на изображение\r\n        })\r\n    })\r\n        .then(handleResponse);\r\n};\r\n\r\n// Получение данных текущего пользователя\r\nexport const getUserData = () => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse);\r\n};\r\n\r\n// Получение начального набора карточек\r\nexport const getInitialCards = () => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'GET',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse);\r\n};\r\n\r\n// Удаление карточки по ID\r\nexport const deleteCard = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse);\r\n};\r\n\r\n// Установка или снятие лайка с карточки\r\nexport const addLike = (cardId, currentLike) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: currentLike ? 'DELETE' : 'PUT', // если лайк уже стоит — удаляем, иначе — добавляем\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse);\r\n};\r\n","import '../pages/index.css';\nimport { createCard } from './card.js';\nimport { openModal, closeModal, closeModalOverlay } from './modal.js';\nimport { enableValidation, clearValidation } from './validation.js';\nimport {\n    config,\n    updatePhotoCheck,\n    updatePhoto,\n    updateProfile,\n    addCard,\n    getUserData,\n    getInitialCards,\n    deleteCard,\n    addLike\n} from './api.js';\n\n// Кнопки и элементы модальных окон\nconst editProfileButton = document.querySelector('.profile__edit-button');\nconst editProfilePopup = document.querySelector('.popup_type_edit');\nconst addCardButton = document.querySelector('.profile__add-button');\nconst addCardPopup = document.querySelector('.popup_type_new-card');\nconst editAvatarPopup = document.querySelector('.popup_type_new_avatar');\nconst profileAvatar = document.querySelector('.profile__image');\n\n// Поля формы редактирования профиля\nconst nameInputField = document.querySelector('.popup__input_type_name');\nconst descriptionInputField = document.querySelector('.popup__input_type_description');\nconst profileName = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\nconst editProfileForm = document.querySelector('.popup__form[name=\"edit-profile\"]');\n\n// Форма добавления карточки\nconst addCardForm = document.querySelector('.popup__form[name=\"new-place\"]');\n\n// Модальное окно с изображением\nconst imagePopup = document.querySelector('.popup_type_image');\nconst imagePopupImage = document.querySelector('.popup__image');\nconst imagePopupCaption = document.querySelector('.popup__caption');\n\n// Список карточек\nconst cardsContainer = document.querySelector('.places__list');\n\n// Форма смены аватара\nconst avatarForm = document.querySelector('.popup__form[name=\"new-avatar\"]');\nconst avatarInput = document.querySelector('.popup__input_type_avatar');\n\n// Конфигурация валидации\nconst validationConfig = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n};\n\n// Открытие попапа смены аватара\nprofileAvatar.addEventListener('click', () => {\n    clearValidation(avatarForm, validationConfig);\n    openModal(editAvatarPopup);\n});\n\n// Открытие попапа добавления карточки\naddCardButton.addEventListener('click', () => {\n    clearValidation(addCardForm, validationConfig);\n    openModal(addCardPopup);\n});\n\n// Открытие попапа редактирования профиля\neditProfileButton.addEventListener('click', () => {\n    clearValidation(editProfileForm, validationConfig);\n    nameInputField.value = profileName.textContent;\n    descriptionInputField.value = profileDescription.textContent;\n    openModal(editProfilePopup);\n});\n\n// Закрытие попапа при нажатии на кнопку закрытия\ndocument.addEventListener('click', (evt) => {\n    if (evt.target.classList.contains('popup__close')) {\n        const popupToClose = evt.target.closest('.popup');\n        closeModal(popupToClose);\n    }\n});\n\n// Открытие изображения в полноэкранном режиме\nfunction openImagePopup(imageSrc, imageAlt) {\n    imagePopupImage.src = imageSrc;\n    imagePopupImage.alt = imageAlt;\n    imagePopupCaption.textContent = imageAlt;\n    openModal(imagePopup);\n}\n\n// Закрытие попапа при клике по оверлею\ndocument.addEventListener('click', closeModalOverlay);\n\n// Активация валидации всех форм\nenableValidation(validationConfig);\n\n// Обработка отправки формы смены аватара\navatarForm.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n\n    const submitButton = avatarForm.querySelector('.popup__button');\n    submitButton.textContent = \"Сохранение...\";\n    submitButton.disabled = true;\n\n    updatePhotoCheck(avatarInput)\n        .catch((error) => {\n            console.log('Ошибка при проверке ссылки на аватар:', error);\n        });\n\n    updatePhoto(avatarInput)\n        .then((data) => {\n            profileAvatar.style.backgroundImage = `url(${data.avatar})`;\n        })\n        .finally(() => {\n            submitButton.textContent = \"Сохранить\";\n            submitButton.disabled = false;\n            closeModal(editAvatarPopup);\n        })\n        .catch((error) => {\n            console.log('Ошибка при обновлении аватара:', error);\n        });\n});\n\n// Обработка отправки формы редактирования профиля\neditProfileForm.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n\n    profileName.textContent = nameInputField.value;\n    profileDescription.textContent = descriptionInputField.value;\n\n    const submitButton = editProfileForm.querySelector('.popup__button');\n    submitButton.textContent = \"Сохранение...\";\n    submitButton.disabled = true;\n\n    updateProfile(nameInputField.value, descriptionInputField.value)\n        .then((data) => {\n            profileName.textContent = data.name;\n            profileDescription.textContent = data.about;\n        })\n        .finally(() => {\n            submitButton.textContent = \"Сохранить\";\n            submitButton.disabled = false;\n            closeModal(editProfilePopup);\n        })\n        .catch((error) => {\n            console.log('Ошибка при обновлении профиля:', error);\n        });\n});\n\n// Обработка отправки формы добавления карточки\naddCardForm.addEventListener('submit', (evt) => {\n    evt.preventDefault();\n\n    const submitButton = addCardForm.querySelector('.popup__button');\n    const cardName = document.querySelector('.popup__input_type_card-name').value;\n    const cardLink = document.querySelector('.popup__input_type_url').value;\n\n    submitButton.textContent = \"Сохранение...\";\n    submitButton.disabled = true;\n\n    addCard(cardName, cardLink)\n        .then((cardData) => {\n            const newCard = createCard(cardData, deleteCard, addLike, cardData.owner._id, openImagePopup);\n            cardsContainer.prepend(newCard);\n        })\n        .finally(() => {\n            submitButton.textContent = \"Сохранить\";\n            submitButton.disabled = false;\n            addCardForm.reset();\n            closeModal(addCardPopup);\n        })\n        .catch((error) => {\n            console.log('Ошибка при добавлении карточки:', error);\n        });\n});\n\n// Загрузка данных пользователя и карточек при инициализации\nPromise.all([getUserData(), getInitialCards()])\n    .then(([userData, initialCards]) => {\n        profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\n        profileName.textContent = userData.name;\n        profileDescription.textContent = userData.about;\n        const userId = userData._id;\n\n        initialCards.forEach((card) => {\n            const newCard = createCard(card, deleteCard, addLike, userId, openImagePopup);\n            cardsContainer.append(newCard);\n        });\n    })\n    .catch((error) => {\n        console.log('Ошибка при загрузке данных:', error);\n    });\n"],"names":["openModal","currentModal","classList","add","document","addEventListener","closeModalEscape","closeModal","remove","removeEventListener","evt","key","querySelector","createCard","cardData","handleDeleteCard","handleLikeToggle","currentUserId","openImagePopup","cardElement","content","cloneNode","likeButton","cardImage","likeCounter","cardTitle","deletePopup","deleteButton","confirmDeleteButton","textContent","likes","length","name","some","like","_id","hasUserLiked","contains","then","updatedCard","toggle","catch","error","console","owner","link","src","alt","hideInputError","formElement","inputElement","configValidation","errorElement","concat","id","errorClass","inputErrorClass","disableSubmitButton","button","config","disabled","inactiveButtonClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","handleResponse","response","ok","json","Promise","reject","status","deleteCard","cardId","fetch","method","headers","authorization","addLike","currentLike","editProfileButton","editProfilePopup","addCardButton","addCardPopup","editAvatarPopup","profileAvatar","nameInputField","descriptionInputField","profileName","profileDescription","editProfileForm","addCardForm","imagePopup","imagePopupImage","imagePopupCaption","cardsContainer","avatarForm","avatarInput","validationConfig","formSelector","imageSrc","imageAlt","value","target","closest","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","preventDefault","url","newAvatarPhoto","submitButton","log","get","startsWith","body","JSON","stringify","avatar","data","style","backgroundImage","finally","nameData","aboutData","about","nameCard","linkCard","cardName","cardLink","newCard","prepend","reset","all","_ref","_ref2","userData","initialCards","userId","card","append"],"sourceRoot":""}